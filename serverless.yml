service: aws-s3-to-dynamodb-pipeline

frameworkVersion: '3'

plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: python3.9
  environment:
    S3_BUCKET: !Ref S3Bucket

functions:
  populate_dynamodb_table:
    handler: src.handlers.create_handler.populate_dynamodb_table
    iamRoleStatementsName: lambda-s3-to-dynamo-role
    iamRoleStatements:
      - Effect: "Allow"        
        Action: 
          - s3:GetObject       
          - s3:ListBucket
        Resource: 
          - !GetAtt [S3Bucket, Arn]
          - !Sub "arn:aws:s3:::${S3Bucket}/*"
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: s3-to-dynamodb-bucket-julianpulecio
        NotificationConfiguration: 
          QueueConfigurations:
            - Event : 's3:ObjectCreated:*'
              Queue : !GetAtt [SQSQueue, Arn]
      DependsOn: SQSQueue

    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: s3-to-dynamodb-SQSQueue-julianpulecio
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt [DeadLetterQueue, Arn]
          maxReceiveCount: 5

    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: s3-to-dynamodb-SQSDeadLetterQueue-julianpulecio
    
    SqsPolicy: 
      Type: AWS::SQS::QueuePolicy
      Properties: 
        Queues: 
          - !Ref SQSQueue
        PolicyDocument: 
          Statement: 
            - Effect: Allow
              Principal: '*'
              Action: 'SQS:*'
              Resource: !GetAtt [SQSQueue, Arn]


